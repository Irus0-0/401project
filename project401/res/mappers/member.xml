<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper   PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- !DOCTYPE 뒤의 단어 => 루트 element(루트 태그) 를 알려줌 -->
<!-- mapper 파일 -->

<!-- namespace => 자바의 패키지 개념 (쿼리id가 다른 xml 파일의 쿼리 id와 똑같을 수 있는 여지를 줄여줌) -->
<mapper namespace="member">
	
	<!-- 
	
		이 영역에 sql문에 맞는 태그를 사용하여 SQL문을 작성하면 된다.
		
		사용할 수 있는 기본적인 태그들
		
		<select> ~~~ </select>
		<insert> ~~~ </insert>
		<update> ~~~ </update>
		<delete> ~~~ </delete>
		
		위 태그에서 사용되는 속성들
		
		1) id : 해당 태그를 호출할 때 namespace와 연결하여 사용하는 이름 (절대 중복되면 안 됨)
		
		2) parameterType : SQL문에 사용될 데이터가 들어있는 객체타입을 지정한다.  // 파라미터 타입을 마이바티스에게 알려주는 것
						   (보통 VO클래스, 자바의 자료형이름 등이 사용된다.)
						   (typeAlias로 지정한 alias명을 사용할 수도 있다.)
						   
		3) resultType : select문을 실행한 결과를 담을 객체타입을 지정한다.   // select 쿼리를 사용할 때만 필요
					    (보통 VO클래스, 자바의 자료형이름 등이 사용된다.)
						(typeAlias로 지정한 alias명을 사용할 수도 있다.)

		4) resultMap : 결과 레코드 컬럼명과 VO객체의 property명이 다를 경우에  // VO객체의 필드와 컬럼명이 다를 경우 사용
					   적절한 매핑을 위해 사용한다.
			   	
	 -->


	<insert id="insertMember" parameterType="kr.or.ddit.member.vo.MemberVO">
							  <!-- 파라미터로 받을 객체의 타입 (생략해도 myBatis가 유추할 수 있음) -->
		insert into mymember (mem_id, mem_name, mem_tel, mem_addr)       <!-- #{} : myBatis가 데이터타입에 맞게 쿼리를 실행해줌, ${} : 고정적인 값  -->
		values (#{memId}, #{memName}, #{memTel}, #{memAddr})        	 <!-- 파라미터로 받은 객체의 memId를 자동유추해서 #{memId}에 대치시킴 -->
																		 <!-- #{memName, jdbcType=VARCHAR} 설정 => null이 들어와도 '부적합한 열 유형 : 1111' 에러 안 뜸 -->
	</insert>


	<update id="updateMember" parameterType="kr.or.ddit.member.vo.MemberVO">
	
		update mymember
		   set mem_name = #{memName},
			   mem_tel = #{memTel},
			   mem_addr = #{memAddr}
	     where mem_id = #{memId}
	
	</update>


	<delete id="deleteMember" parameterType="String">   <!-- java.lang.String 이지만 자주 쓰는 타입은 자동으로 인식함 -->
	
		delete from mymember where mem_id = #{aaa}      <!-- 어차피 String 값 하나만 날라오기 때문에 {} 안의 속성이름은 상관없음, 안 적으면 예외발생 -->
	
	</delete>
	
	
	<select id="selectAllMember" resultType="kr.or.ddit.member.vo.MemberVO">
		
	    <!-- select * from mymember 로 적으면 예외 발생-->
		
		select mem_id,        <!-- mv.setMem_id() 라는 메소드는 존재하지 않음 => myBatis가 유추할수 있도록 Alias를 적어줌 -->
			   mem_name,
			   mem_tel,
			   mem_addr
		  from mymember
		
	</select>


	<select id="getMember" resultType="kr.or.ddit.member.vo.MemberVO">  <!-- 파라미터 타입은 생략함 -->
	
		select mem_id as memId,
		 	   mem_name as memName,
			   mem_tel as memTel,
			   mem_addr as memAddr
		  from mymember
		 where mem_id = #{memId}
	
	</select>
	
	
	<select id="checkMember" resultType="int">
	
		select count(*) as cnt from mymember where mem_id = #{memId}
		
	</select>
	
	<resultMap type="memVO" id="memMap">
		<result column="mem_id" property="memId" />
		<result column="mem_name" property="memName" />
		<result column="mem_tel" property="memTel" />
		<result column="mem_addr" property="memAddr" />
	</resultMap>
	<!-- resultMap : 매핑 정보 제공, 이외 기능도 많음-->
	
	<select id="searchMember" resultMap="memMap">
	
		select *
		  from mymember
		 where 1=1
	 <if test="memId != null and memId != ''">
	 		and mem_id = #{memId}
	 </if>
	 <if test="memName != null and memName != ''">
	 		and mem_name = #{memName}
	 </if>
	 <if test="memTel != null and memTel != ''">
	 		and mem_tel = #{memTel}
	 </if>
	 <if test="memAddr != null and memAddr != ''">
	 		and mem_addr like '%' || #{memAddr} || '%'
	 </if>

	</select>
	

</mapper>



